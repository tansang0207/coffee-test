// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: e2GgHvNkZGeWD3TYfD2fCA
// Component: gRwBwfK17Zs6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Iframe } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../t_9_imported_dep_4/plasmic.module.css"; // plasmic-import: rJmrvZ8rTbZpYCx9aXq6iH/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: e2GgHvNkZGeWD3TYfD2fCA/projectcss
import sty from "./PlasmicGmaps.module.css"; // plasmic-import: gRwBwfK17Zs6/css

createPlasmicElementProxy;

export type PlasmicGmaps__VariantMembers = {};
export type PlasmicGmaps__VariantsArgs = {};
type VariantPropType = keyof PlasmicGmaps__VariantsArgs;
export const PlasmicGmaps__VariantProps = new Array<VariantPropType>();

export type PlasmicGmaps__ArgsType = {
  apiKey?: string;
  location?: string;
  zoom?: number;
};
type ArgPropType = keyof PlasmicGmaps__ArgsType;
export const PlasmicGmaps__ArgProps = new Array<ArgPropType>(
  "apiKey",
  "location",
  "zoom"
);

export type PlasmicGmaps__OverridesType = {
  root?: Flex__<"a"> & Partial<LinkProps>;
  iframe?: Flex__<typeof Iframe>;
};

export interface DefaultGmapsProps {
  apiKey?: string;
  location?: string;
  zoom?: number;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGmaps__RenderFunc(props: {
  variants: PlasmicGmaps__VariantsArgs;
  args: PlasmicGmaps__ArgsType;
  overrides: PlasmicGmaps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          apiKey: "AIzaSyB0GKVsucKDMR6XrUhlKiestHzi0U0AZLQ",
          location: "Grand-Rue 52, 1095 Lutry",
          zoom: 20
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      component={Link}
      onClick={async event => {
        const $steps = {};

        $steps["runCode"] = true
          ? (() => {
              const actionArgs = {
                customFunction: async () => {
                  return window.open(
                    "https://www.google.com/maps/place?q=" +
                      $props.location +
                      "&zoom=" +
                      $props.zoom,
                    "_blank"
                  );
                }
              };
              return (({ customFunction }) => {
                return customFunction();
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
      platform={"nextjs"}
    >
      <Iframe
        data-plasmic-name={"iframe"}
        data-plasmic-override={overrides.iframe}
        className={classNames("__wab_instance", sty.iframe)}
        preview={true}
        src={(() => {
          try {
            return (
              "https://www.google.com/maps/embed/v1/place?key=" +
              $props.apiKey +
              "&q=" +
              $props.location +
              "&zoom=" +
              $props.zoom
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </PlasmicLink__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "iframe"],
  iframe: ["iframe"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  iframe: typeof Iframe;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGmaps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGmaps__VariantsArgs;
    args?: PlasmicGmaps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGmaps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGmaps__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGmaps__ArgProps,
          internalVariantPropNames: PlasmicGmaps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGmaps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGmaps";
  } else {
    func.displayName = `PlasmicGmaps.${nodeName}`;
  }
  return func;
}

export const PlasmicGmaps = Object.assign(
  // Top-level PlasmicGmaps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iframe: makeNodeComponent("iframe"),

    // Metadata about props expected for PlasmicGmaps
    internalVariantProps: PlasmicGmaps__VariantProps,
    internalArgProps: PlasmicGmaps__ArgProps
  }
);

export default PlasmicGmaps;
/* prettier-ignore-end */
